{"version":3,"file":"static/js/378.dc7fcf65.chunk.js","mappings":"yXA+BA,MA0gBA,EA1gBoBA,IAIb,IAJc,KACnBC,EAAI,QACJC,EAAO,mBACPC,EAAqBA,CAACC,EAAIC,KAALF,GACtBH,EACC,MAAOM,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAC1BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,OAExCK,EAAWC,IAAgBN,EAAAA,EAAAA,UAAwB,OACnDO,EAAeC,IAAoBR,EAAAA,EAAAA,UAAyB,QAG5DS,EAASC,IAAcV,EAAAA,EAAAA,UAE3B,CAAC,IACGW,EAAUC,IAAeZ,EAAAA,EAAAA,UAA6B,OACtDa,EAAeC,IAAoBd,EAAAA,EAAAA,UAAwB,OAC3De,EAAaC,IAAkBhB,EAAAA,EAAAA,UAAiB,KAChDiB,EAAYC,IAAiBlB,EAAAA,EAAAA,UAAiB,aAC9CmB,EAAaC,IAAkBpB,EAAAA,EAAAA,UAAS,IACxCqB,EAAUC,IAAetB,EAAAA,EAAAA,UAAS,IA8BnCuB,IAAeC,EAAAA,EAAAA,UAAQ,KAC3B,IAAIC,EAAW,IAAIhC,GAqBnB,OAlBAiC,OAAOC,QAAQlB,GAASmB,SAAQC,IAAqB,IAAnBC,EAAOjC,GAAMgC,EAC7CJ,EAAWA,EAASM,QAAQC,IAAG,IAAAC,EAAA,OACnB,QADmBA,EAC7BD,EAAIF,UAAM,IAAAG,OAAA,EAAVA,EAAYC,WAAWC,cAAcC,SAASvC,EAAMA,MAAMsC,cAAc,GACzE,IAIC9B,GACFoB,EAASY,MAAK,CAACC,EAAGC,KAChB,MAAMC,EAAOF,EAAEjC,GACToC,EAAOF,EAAElC,GAEf,OAAImC,EAAOC,EAA+B,QAAlBlC,GAA2B,EAAI,EACnDiC,EAAOC,EAA+B,QAAlBlC,EAA0B,GAAK,EAChD,CAAC,IAILkB,CAAQ,GACd,CAAChC,EAAMY,EAAWE,EAAeE,KAkB7BiC,GAAaC,MAZDnB,EAAAA,EAAAA,UAAQ,IACpBnB,EACE,IAAIkB,IAAcc,MAAK,CAACC,EAAGC,KAChC,MAAMC,EAAOF,EAAEjC,GACToC,EAAOF,EAAElC,GACf,OAAImC,EAAOC,EAA+B,QAAlBlC,GAA2B,EAAI,EACnDiC,EAAOC,EAA+B,QAAlBlC,EAA0B,GAAK,EAChD,CAAC,IANagB,IAQtB,CAACA,GAAclB,EAAWE,KAGSP,EAAAA,EAAAA,UAAS,KAgBzC4C,GAAgBnD,EAAKoD,MACzB1B,EAAcE,GACbF,EAAc,GAAKE,GAqCtB,OACEyB,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAC,SAAA,EACFF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACE,GAAI,CAAEC,SAAU,YAAaF,SAAA,EA2BhCG,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CACbC,UAAWC,EAAAA,EACXC,UAAW,EACXN,GAAI,CACFO,UAAW,IACXC,SAAU,OACVC,aAAc,EACdC,OAAQ,kBACRT,SAAU,WACV,uBAAwB,CACtBU,MAAO,MACPC,OAAQ,OAEV,6BAA8B,CAC5BC,gBAAiB,OACjBJ,aAAc,QAEhBV,UAEFF,EAAAA,EAAAA,MAACiB,EAAAA,EAAK,CAACC,cAAY,EAACf,GAAI,CAAEgB,SAAU,KAAOjB,SAAA,EACzCG,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAAAlB,UACRF,EAAAA,EAAAA,MAACqB,EAAAA,EAAQ,CACPlB,GAAI,CACFa,gBAAiB,UACjBM,UAAW,qCACXpB,SAAA,EAEFG,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAACpB,GAAI,CAAEa,gBAAiB,cAClCX,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CACRC,QAAQ,WACRrB,GAAI,CACFa,gBAAiB,UACjBS,aAAc,qBACdvB,UAEFG,EAAAA,EAAAA,KAACqB,EAAAA,EAAQ,CACPC,QAASxE,EAASyE,SAAWjF,EAAKiF,OAClCC,cACE1E,EAASyE,OAAS,GAAKzE,EAASyE,OAASjF,EAAKiF,OAEhDE,SAAWC,GACT3E,EAAY2E,EAAEC,OAAOL,QAAUhF,EAAKsF,KAAKC,GAAMA,EAAEpF,KAAM,IAEzDqD,GAAI,CACFgC,MAAO,UACP,gBAAiB,CACfA,MAAO,WAET,8BAA+B,CAC7BA,MAAO,gBAMdvF,EAAQqF,KAAKG,GACE,OAAdA,EAAIpD,MAAiB,MACnBqB,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAERpB,GAAI,CACFkC,WAAY,IACZC,cAAe,aACftB,gBAAiB,UACjBmB,MAAO,UACPI,SAAU,SACVC,cAAe,SACff,aAAc,qBACdvB,UAEFF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFwC,QAAQ,OACRC,WAAW,SACXC,eAAe,gBAAezC,SAAA,EAE9BG,EAAAA,EAAAA,KAACuC,EAAAA,EAAc,CACbC,OAAQtF,IAAc6E,EAAIpD,MAC1B8D,UACEvF,IAAc6E,EAAIpD,MAAQvB,EAAgB,MAE5CsF,QAASA,KAAMC,OA9InBhE,EA8I8BoD,EAAIpD,WA7IhDzB,IAAcyB,EAChBtB,GAAkBuF,GAAmB,QAATA,EAAiB,OAAS,SAEtDzF,EAAawB,GACbtB,EAAiB,SALDsB,KA8IyC,EACrCmB,GAAI,CACF,4BAA6B,CAC3BgC,MAAO,WAET,uCAAwC,CACtCA,MAAO,YAETjC,SAEDkC,EAAIc,cAGP7C,EAAAA,EAAAA,KAAC8C,EAAAA,EAAU,CACTC,KAAK,QACLL,QAAUhB,GAtIVsB,EACtBC,EACAC,KAEAzF,EAAYwF,EAAME,eAClBxF,EAAiBuF,GACjB,MAAME,EAAgB9F,EAAQ4F,GAC9BrF,EAAeuF,EAAgBA,EAAc1G,MAAQ,IACrDqB,EAAcqF,EAAgBA,EAAcC,KAAO,WAAW,EA8HxBL,CAAgBtB,EAAGK,EAAIpD,OACvCmB,GAAI,CACFwD,GAAI,EACJxB,MAAO,UACP,UAAW,CACTA,MAAO,YAETjC,UAEFG,EAAAA,EAAAA,KAACuD,EAAAA,EAAY,CAACrB,SAAS,gBA7CtBH,EAAIpD,eAsDnBqB,EAAAA,EAAAA,KAACwD,EAAAA,EAAS,CAAA3D,SACPJ,GAAcmC,KAAI,CAAC/C,EAAK4E,KACvB9D,EAAAA,EAAAA,MAAC+D,EAAAA,SAAc,CAAA7D,SAAA,EACbF,EAAAA,EAAAA,MAACqB,EAAAA,EAAQ,CACP2C,OAAK,EAEL7D,GAAI,CACFa,gBAAiB8C,EAAQ,IAAM,EAAI,UAAY,UAC/CG,WAAY,yBACZ/D,SAAA,EAEFG,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAAArB,UACRG,EAAAA,EAAAA,KAAC8C,EAAAA,EAAU,CACTC,KAAK,QACLL,QAASA,IACPzF,EAAeD,IAAgB6B,EAAIpC,GAAK,KAAOoC,EAAIpC,IACpDoD,SAEA7C,IAAgB6B,EAAIpC,IAAKuD,EAAAA,EAAAA,KAAC6D,EAAAA,EAAU,KAAM7D,EAAAA,EAAAA,KAAC8D,EAAAA,EAAO,SAIvD9D,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAACC,QAAQ,WAAUtB,UAC3BG,EAAAA,EAAAA,KAACqB,EAAAA,EAAQ,CACPC,QAASxE,EAASmC,SAASJ,EAAIpC,IAC/BgF,SAAUA,KAAMsC,OAlShBtH,EAkS6BoC,EAAIpC,QAjSrDM,GAAa6F,GACXA,EAAK3D,SAASxC,GAAMmG,EAAKhE,QAAQoF,GAASA,IAASvH,IAAM,IAAImG,EAAMnG,KAFjDA,KAkSqC,MAIxCF,EAAQqF,KAAKG,IAAG,IAAAkC,EAAA,MACD,WAAdlC,EAAIpD,OACFqB,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAAArB,UACRG,EAAAA,EAAAA,KAACkE,EAAAA,EAAW,CAACnB,KAAK,QAAQoB,WAAS,EAAAtE,UACjCF,EAAAA,EAAAA,MAACyE,EAAAA,EAAM,CACL1H,MAAiB,QAAZuH,EAAEpF,EAAIwF,cAAM,IAAAJ,EAAAA,EAAI,WACrBxC,SAAWC,GACTlF,EAAmBqC,EAAIpC,GAAIiF,EAAEC,OAAOjF,OAEtCoD,GAAI,CACFoC,SAAU,UACVF,WAAY,IAEZzB,aAAc,MACduB,MACiB,WAAfjD,EAAIwF,OACA,UACA,UACN1D,gBACiB,WAAf9B,EAAIwF,OACA,UACA,UACN3D,OAAQ,QACRb,SAAA,EAEFG,EAAAA,EAAAA,KAACsE,EAAAA,EAAQ,CAAC5H,MAAM,SAAQmD,SAAC,YACzBG,EAAAA,EAAAA,KAACsE,EAAAA,EAAQ,CAAC5H,MAAM,WAAUmD,SAAC,mBAxBjB,GAAGhB,EAAIpC,aA4BP,OAAdsF,EAAIpD,MAAiB,MACvBqB,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAAArB,SACPhB,EAAIkD,EAAIpD,QADK,GAAGE,EAAIpC,MAAMsF,EAAIpD,QAGlC,MA1DEE,EAAIpC,IA8DVO,IAAgB6B,EAAIpC,KACnBuD,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAAAnB,UACPG,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAACqD,QAAShI,EAAQgF,OAAS,EAAGzB,GAAI,CAAE0E,EAAG,GAAI3E,UACnDG,EAAAA,EAAAA,KAACyE,EAAAA,EAAQ,CAACC,IAAI,EAAMC,QAAQ,OAAOC,eAAa,EAAA/E,UAC9CG,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CACFE,GAAI,CAAE0E,EAAG,EAAGK,QAAS,UAAWtE,aAAc,GAAIV,UAElDF,EAAAA,EAAAA,MAACmF,EAAAA,EAAU,CAACC,QAAQ,QAAOlF,SAAA,CAAC,qBACP,KACnBG,EAAAA,EAAAA,KAAA,KAAAH,SAAIhB,EAAImG,MAAQ,OAAOnG,EAAIpC,oBA1EpBoC,EAAIpC,cAuFjCkD,EAAAA,EAAAA,MAACQ,EAAAA,EAAK,CACJC,UAAW,EACXN,GAAI,CACFmF,GAAI,EACJC,GAAI,EACJC,GAAI,EACJ/C,QAAS,OACTE,eAAgB,gBAChBD,WAAY,SACZ9B,aAAc,GACdV,SAAA,EAEFF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACE,GAAI,CAAEsC,QAAS,OAAQC,WAAY,UAAWxC,SAAA,EACjDG,EAAAA,EAAAA,KAAC8E,EAAAA,EAAU,CAACC,QAAQ,QAAQjF,GAAI,CAAEsF,GAAI,GAAIvF,SAAC,oBAG3CG,EAAAA,EAAAA,KAACkE,EAAAA,EAAW,CAACnB,KAAK,QAAOlD,UACvBG,EAAAA,EAAAA,KAACoE,EAAAA,EAAM,CACLtE,GAAI,CACFS,aAAc,GAEhB7D,MAAOwB,EACPuD,SApRgBC,IAC5BvD,EAAYkH,SAAS3D,EAAEC,OAAOjF,MAAO,KACrCuB,EAAe,EAAE,EAkR0B4B,SAE9B,CAAC,GAAI,GAAI,GAAI,KAAK+B,KAAK0D,IACtBtF,EAAAA,EAAAA,KAACsE,EAAAA,EAAQ,CACPxE,GAAI,CACFS,aAAc,EACd,qBAAsB,CACpBA,aAAc,IAIlB7D,MAAO4I,EAAIzF,SAEVyF,GAHIA,aASftF,EAAAA,EAAAA,KAACuF,EAAAA,EAAU,CACTC,MAAOC,KAAKC,KAAKpJ,EAAKiF,OAASrD,GAC/BvB,KAAMqB,EAAc,EACpByD,SAAUA,CAACC,EAAG/E,IAASsB,EAAetB,EAAO,GAC7CmF,MAAM,UACN6D,MAAM,UACNC,iBAAe,EACfC,gBAAc,EACdC,aAAc,EACdC,cAAe,EACfjG,GAAI,CACF,4BAA6B,CAC3BS,aAAc,aAQxBZ,EAAAA,EAAAA,MAACqG,EAAAA,EAAI,CACHxI,SAAUA,EACVyI,KAAMC,QAAQ1I,GACd2I,QAASA,IAAM1I,EAAY,MAC3B2I,WAAY,CACVC,MAAO,CACL5F,MAAO,QACPU,QAAS,SAEXtB,SAAA,EAEFG,EAAAA,EAAAA,KAACsE,EAAAA,EAAQ,CAAAzE,UACPF,EAAAA,EAAAA,MAACuE,EAAAA,EAAW,CAACC,WAAS,EAAAtE,SAAA,EACpBG,EAAAA,EAAAA,KAACsG,EAAAA,EAAU,CAACxG,GAAI,CAAEkC,WAAY,KAAMnC,SAAC,iBACrCF,EAAAA,EAAAA,MAACyE,EAAAA,EAAM,CACL1H,MAAOoB,EACP2D,SA1XoBwB,IAC9BlF,EAAckF,EAAMtB,OAAOjF,MAAgB,EA0XjC6J,MAAM,cACNzG,GAAI,CACFS,aAAc,EACd,qCAAsC,CACpCiG,YAAa,SAEf,2CAA4C,CAC1CA,YAAa,YAEf3G,SAAA,EAEFG,EAAAA,EAAAA,KAACsE,EAAAA,EAAQ,CAAC5H,MAAM,WAAUmD,SAAC,cAC3BG,EAAAA,EAAAA,KAACsE,EAAAA,EAAQ,CAAC5H,MAAM,aAAYmD,SAAC,iBAC7BG,EAAAA,EAAAA,KAACsE,EAAAA,EAAQ,CAAC5H,MAAM,WAAUmD,SAAC,eAC3BG,EAAAA,EAAAA,KAACsE,EAAAA,EAAQ,CAAC5H,MAAM,SAAQmD,SAAC,YACzBG,EAAAA,EAAAA,KAACsE,EAAAA,EAAQ,CAAC5H,MAAM,cAAamD,SAAC,kBAC9BG,EAAAA,EAAAA,KAACsE,EAAAA,EAAQ,CAAC5H,MAAM,WAAUmD,SAAC,uBAKjCG,EAAAA,EAAAA,KAACsE,EAAAA,EAAQ,CAAAzE,UACPG,EAAAA,EAAAA,KAACyG,EAAAA,EAAS,CACRF,MAAM,eACNxB,QAAQ,WACRrI,MAAOkB,EACP6D,SAAUA,KArbOiF,IAAC/H,EAAejC,EAAfiC,EAsbGb,EAtbYpB,EAsbAkB,EArbzCL,GAAYqF,IAAI,IAAA+D,EAAA,MAAM,IACjB/D,EACH,CAACjE,GAAQ,CAAEjC,QAAO2G,MAAiB,QAAXsD,EAAA/D,EAAKjE,UAAM,IAAAgI,OAAA,EAAXA,EAAatD,OAAQ,YAC9C,GAkboD,EAE7Cc,WAAS,EACTrE,GAAI,CACFmF,GAAI,EACJ,wBAAyB,CACvBjD,WAAY,KAEd,qCAAsC,CACpCwE,YAAa,QAEf,2CAA4C,CAC1CA,YAAa,iBAMrBxG,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACwC,QAAQ,OAAOE,eAAe,WAAW2C,GAAI,EAAGG,GAAI,EAAEvF,UACzDG,EAAAA,EAAAA,KAAC4G,EAAAA,EAAM,CACL7B,QAAQ,YACRrC,QArdUmE,KACdnJ,IACFH,GAAYqF,IAAI,IACXA,EACH,CAAClF,GAAgB,CAAEhB,MAAOkB,EAAayF,KAAMvF,OAE/CL,EAAY,MACd,EA+cQqC,GAAI,CACFqB,QAAS,WACTZ,aAAc,MACdI,gBAAiB,UACjBmB,MAAO,QACP,UAAW,CACTnB,gBAAiB,YAEnBd,SACH,iBAKD,C,uNC/gBH,MAAMiH,EAAmBzK,IAKpB,IALqB,MAC/B0K,EAAK,KACLd,EAAI,QACJE,EAAO,aACPa,GACI3K,EACJ,MAAM4K,GAAQC,EAAAA,EAAAA,MACPC,EAAcC,IAAmBvK,EAAAA,EAAAA,UAAsB,OACvDwK,EAAYC,IAAiBzK,EAAAA,EAAAA,WAAS,IAiBvC,aAAE0K,EAAY,cAAEC,IAAkBC,EAAAA,EAAAA,IAAY,CAClDC,OAAQ,CACN,2BAA4B,CAAC,OAAQ,SACrC,WAAY,CAAC,SAEfC,QAAS,UACTC,OAASC,IACP,MAAMC,EAAOD,EAAc,GAC3BT,EAAgBU,EAAK,IA2BzB,OACEnI,EAAAA,EAAAA,MAACoI,EAAAA,EAAM,CACL9B,KAAMA,EACNE,QAASA,KACPiB,EAAgB,MAChBjB,GAAS,EAEXC,WAAY,CACVtG,GAAI,CACFS,aAAc,OACdY,QAAS,EACTR,gBAAiBsG,EAAMe,QAAQC,WAAWC,MAC1CjH,UAAWgG,EAAMkB,QAAQ,KAE3BtI,SAAA,CACH,IACG,KACFG,EAAAA,EAAAA,KAACoI,EAAAA,EAAW,CACVtI,GAAI,CACFuI,WAAY,8BACZrG,WAAY,IACZE,SAAU,UACVoG,UAAW,SACXC,GAAI,GACJ1I,SAEDkH,IACW,KAEdpH,EAAAA,EAAAA,MAAC6I,EAAAA,EAAa,CACZ1I,GAAI,CACF2I,GAAI,EACJ3H,SAAU,CAAE4H,GAAI,IAAKC,GAAI,MACzB9I,SAAA,EAEFG,EAAAA,EAAAA,KAAC8E,EAAAA,EAAU,CACThF,GAAI,CAAEgC,MAAO,YACbiD,QAAQ,QACRuD,UAAU,SAAQzI,SACnB,6EAIDF,EAAAA,EAAAA,MAACiJ,EAAAA,GAAI,CAAC5E,MAAI,EAAC0E,GAAI,GAAIC,GAAI,EAAE9I,SAAA,EACvBF,EAAAA,EAAAA,MAACkJ,EAAAA,EAAI,CACH9D,QAAQ,WACRjF,GAAI,CACF0E,EAAG,EACHS,GAAI,EACJqD,UAAW,SACXQ,YAAa,SACbtC,YAAa,UACb7F,gBAAiB,UACjByB,QAAS,OACT2G,cAAe,SACf1G,WAAY,aAGVkF,IAAc1H,SAAA,EAElBG,EAAAA,EAAAA,KAAA,YAAWwH,MAGVL,GACCxH,EAAAA,EAAAA,MAAAqJ,EAAAA,SAAA,CAAAnJ,SAAA,EACEF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFE,GAAI,CACFsC,QAAS,OACT2G,cAAe,SACf1G,WAAY,SACZ4G,GAAI,GACJpJ,SAAA,CAEDsH,EAAanC,KAAKkE,SAAS,SAC1BlJ,EAAAA,EAAAA,KAACmJ,EAAAA,EAAe,CAACrJ,GAAI,CAAEoC,SAAU,GAAIJ,MAAO,cAE5C9B,EAAAA,EAAAA,KAACoJ,EAAAA,EAAc,CAACtJ,GAAI,CAAEoC,SAAU,GAAIJ,MAAO,cAI7C9B,EAAAA,EAAAA,KAAC8E,EAAAA,EAAU,CACTC,QAAQ,QACRjD,MAAM,iBACNhC,GAAI,CAAEuJ,UAAW,aAAcpE,GAAI,GAAIpF,SAEtCsH,EAAanC,WAKlBrF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFE,GAAI,CACFsC,QAAS,OACTkH,IAAK,GACLzJ,SAAA,EAEFG,EAAAA,EAAAA,KAAC4G,EAAAA,EAAM,CACL7B,QAAQ,WACRhC,KAAK,QACLjD,GAAI,CACFmC,cAAe,OACfH,MAAO,UACP0E,YAAa,WAEf9D,QAAUhB,IACRA,EAAE6H,kBACF,MAAMC,EAAMC,IAAIC,gBAAgBvC,GAChCwC,OAAO1D,KAAKuD,EAAK,SAAS,EAC1B3J,SACH,UAIDG,EAAAA,EAAAA,KAAC4G,EAAAA,EAAM,CACL7B,QAAQ,YACRhC,KAAK,QACLjD,GAAI,CAAEmC,cAAe,OAAQtB,gBAAiB,WAC9C+B,QAAUhB,IAGR6F,GAAc,EACd1H,SACH,mBAOLF,EAAAA,EAAAA,MAAAqJ,EAAAA,SAAA,CAAAnJ,SAAA,EACEF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFE,GAAI,CACFsC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBsH,aAAc,GACd/J,SAAA,EAEFG,EAAAA,EAAAA,KAAC6J,EAAAA,GAAa,CAAC/J,GAAI,CAAEgK,aAAc,UACnC9J,EAAAA,EAAAA,KAAC8E,EAAAA,EAAU,CACThD,MAAM,UACNE,WAAW,OACXlC,GAAI,CAAEgC,MAAO,UAAWiI,GAAI,GAAIlK,SACjC,oBAKHF,EAAAA,EAAAA,MAACmF,EAAAA,EAAU,CACTC,QAAQ,QACRjD,MAAM,iBACNhC,GAAI,CAAE8J,aAAc,GAAI/J,SAAA,CACzB,wBAECG,EAAAA,EAAAA,KAAA,SAAM,yCAQZmH,IACAxH,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFwC,QAAQ,OACRC,WAAW,SACXC,eAAe,gBACf2C,GAAI,EAAEpF,SAAA,EAENG,EAAAA,EAAAA,KAAC8E,EAAAA,EAAU,CAACC,QAAQ,QAAQjD,MAAM,iBAAgBjC,SAAC,4DAGnDG,EAAAA,EAAAA,KAAC4G,EAAAA,EAAM,CACL7B,QAAQ,OACRhC,KAAK,QACLjD,GAAI,CACFgC,MAAO,UACPG,cAAe,OACf,UAAW,CAAE+H,eAAgB,aAC7BC,GAAI,GAENvH,QAASwH,UACP,MAEMC,QAAiBC,MADrB,mGAGF,GAAID,EAASE,GAAI,CACf,MAAMC,QAAaH,EAASG,OACtBC,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOjB,IAAIC,gBAAgBY,GAChCC,EAAKI,SAAW,cAChBH,SAASI,KAAKC,YAAYN,GAC1BA,EAAKO,QACLN,SAASI,KAAKG,YAAYR,EAC5B,MACES,QAAQC,MAAM,uBAChB,EACApL,SACH,8BAOTF,EAAAA,EAAAA,MAACuL,EAAAA,EAAa,CACZpL,GAAI,CACFwC,eAAgB,gBAChB4C,GAAI,IACJqD,GAAI,EACJtD,GAAI,EAEJ5C,WAAY,UACZxC,SAAA,EAEFG,EAAAA,EAAAA,KAAC4G,EAAAA,EAAM,CACLlE,QAASyD,EACTpB,QAAQ,WACRjD,MAAM,QACNqJ,WAAWnL,EAAAA,EAAAA,KAACoL,EAAAA,EAAU,IACtBtL,GAAI,CACFS,aAAc,EACd0B,cAAe,OACfiD,GAAI,GACJrF,SACH,YAIDG,EAAAA,EAAAA,KAAC4G,EAAAA,EAAM,CACLlE,QAASsE,EACTjC,QAAQ,WACRoG,WAAWnL,EAAAA,EAAAA,KAACqL,EAAAA,EAAkB,IAC9BvL,GAAI,CACFmI,WAAY,6BAA6BhB,EAAMe,QAAQsD,QAAQC,UAAUtE,EAAMe,QAAQsD,QAAQE,SAASvE,EAAMe,QAAQsD,QAAQG,QAC9H3J,MAAO,OACPvB,aAAc,EACd2E,GAAI,EACJjD,cAAe,OAEf,UAAW,CACTgG,WAAY,6BAA6BhB,EAAMe,QAAQsD,QAAQG,SAASxE,EAAMe,QAAQsD,QAAQE,UAEhG3L,SACH,gBAII,C,kICvTb,MAWMvD,EAAOoP,MAAMC,KAAK,CAAEpK,OAAQ,MAAOK,KAAI,CAACgK,EAAGC,KAAG,CAClDpP,GAAIoP,EAAM,EACVC,YAAa,YAAYD,EAAM,GAC/BE,YAAa,sBACbC,aAAc,aACdC,YAAa,UACbC,WAAY,YACZC,UAAW,sBACXC,UAAW,UACXC,UAAW,gBAGE,SAASC,IACtB,MAAOtP,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,OACxC0P,EAAiBC,IAAsB3P,EAAAA,EAAAA,UAA8B,CAC1EF,KAAM,EACNuB,SAAU,KAkBN3B,EAAU,CACd,CAAEoC,MAAO,KAAMkE,WAAY,KAAM/B,SAAU,IAC3C,CAAEnC,MAAO,cAAekE,WAAY,eAAgB/B,SAAU,KAC9D,CAAEnC,MAAO,cAAekE,WAAY,eAAgB/B,SAAU,KAC9D,CAAEnC,MAAO,eAAgBkE,WAAY,gBAAiB/B,SAAU,KAChE,CAAEnC,MAAO,cAAekE,WAAY,SAAU/B,SAAU,KACxD,CAAEnC,MAAO,aAAckE,WAAY,cAAe/B,SAAU,KAC5D,CAAEnC,MAAO,YAAakE,WAAY,aAAc/B,SAAU,KAC1D,CAAEnC,MAAO,YAAakE,WAAY,aAAc/B,SAAU,KAC1D,CAAEnC,MAAO,YAAakE,WAAY,aAAc/B,SAAU,OAGrD2L,EAAYC,IAAiB7P,EAAAA,EAAAA,WAAS,IACtC8P,EAAaC,IAAkB/P,EAAAA,EAAAA,UAAS,IAsD/C,OACE8C,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAC,SAAA,EACFF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACwC,QAAQ,OAAOE,eAAe,gBAAgB2G,GAAI,EAAGhE,GAAI,EAAEpF,SAAA,EAC9DG,EAAAA,EAAAA,KAAC8E,EAAAA,EAAU,CAACC,QAAQ,QACpB/E,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAAAC,UACFG,EAAAA,EAAAA,KAAC4G,EAAAA,EAAM,CACL7B,QAAQ,WACRjD,MAAM,UACNY,QAvDuBmK,KAC/BD,EAAe,eACfF,GAAc,EAAK,EAqDuB7M,SACnC,mBAKHG,EAAAA,EAAAA,KAAC8G,EAAAA,EAAgB,CACfC,MAAO4F,EACP1G,KAAMwG,EACNtG,QA3DkB2G,KACxBJ,GAAc,EAAM,EA2Dd1F,aAxDkBc,IACxBkD,QAAQ+B,IAAI,qBAAsBjF,EAAK,QA2DrC9H,EAAAA,EAAAA,KAACgN,EAAAA,EAAW,CAAC1Q,KAAMA,EAAMC,QAASA,MAGxC,C","sources":["components/Table/Table.tsx","components/DialogBox/UploadDialog.tsx","views/pages/Meters/index.tsx"],"sourcesContent":["import React, { useState, useMemo } from \"react\";\r\nimport { Collapse, TablePagination } from \"@mui/material\";\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Checkbox,\r\n  IconButton,\r\n  Typography,\r\n  Menu,\r\n  MenuItem,\r\n  TextField,\r\n  Button,\r\n  TableSortLabel,\r\n  Pagination,\r\n  Select,\r\n  MenuItem as MuiMenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n  InputAdornment\r\n} from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport RemoveIcon from \"@mui/icons-material/Remove\";\r\nimport FileDownloadIcon from \"@mui/icons-material/FileDownload\";\r\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\r\n\r\nconst CustomTable = ({\r\n  rows,\r\n  columns,\r\n  handleStatusChange = (id, value) => {}\r\n}) => {\r\n  const [page, setPage] = useState(1);\r\n  const [selected, setSelected] = useState([]);\r\n  const [expandedRow, setExpandedRow] = useState(null);\r\n\r\n  const [sortField, setSortField] = useState<string | null>(null);\r\n  const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\">(\"asc\");\r\n\r\n  // Filters state\r\n  const [filters, setFilters] = useState<{\r\n    [key: string]: { value: string; type: string };\r\n  }>({});\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const [currentColumn, setCurrentColumn] = useState<string | null>(null);\r\n  const [filterValue, setFilterValue] = useState<string>(\"\");\r\n  const [filterType, setFilterType] = useState<string>(\"contains\");\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(10);\r\n\r\n  const handleSelect = (id: string) => {\r\n    setSelected((prev) =>\r\n      prev.includes(id) ? prev.filter((item) => item !== id) : [...prev, id]\r\n    );\r\n  };\r\n\r\n  const handleToggleRow = (id: string) => {\r\n    setExpandedRow(expandedRow === id ? null : id);\r\n  };\r\n\r\n  // Handle applying the filter to the column\r\n  const applyFilter = () => {\r\n    if (currentColumn) {\r\n      setFilters((prev) => ({\r\n        ...prev,\r\n        [currentColumn]: { value: filterValue, type: filterType }\r\n      }));\r\n      setAnchorEl(null); // Close the filter menu\r\n    }\r\n  };\r\n\r\n  const handleFilterChange = (field: string, value: string) => {\r\n    setFilters((prev) => ({\r\n      ...prev,\r\n      [field]: { value, type: prev[field]?.type || \"contains\" }\r\n    }));\r\n  };\r\n\r\n  const filteredRows = useMemo(() => {\r\n    let filtered = [...rows];\r\n\r\n    // Apply filters\r\n    Object.entries(filters).forEach(([field, value]) => {\r\n      filtered = filtered.filter((row) =>\r\n        row[field]?.toString().toLowerCase().includes(value.value.toLowerCase())\r\n      );\r\n    });\r\n\r\n    // Apply sorting\r\n    if (sortField) {\r\n      filtered.sort((a, b) => {\r\n        const aVal = a[sortField];\r\n        const bVal = b[sortField];\r\n\r\n        if (aVal < bVal) return sortDirection === \"asc\" ? -1 : 1;\r\n        if (aVal > bVal) return sortDirection === \"asc\" ? 1 : -1;\r\n        return 0;\r\n      });\r\n    }\r\n\r\n    return filtered;\r\n  }, [rows, sortField, sortDirection, filters]);\r\n\r\n  const handleFilterTypeChange = (event) => {\r\n    setFilterType(event.target.value as string);\r\n  };\r\n\r\n  const sortedRows = useMemo(() => {\r\n    if (!sortField) return filteredRows;\r\n    return [...filteredRows].sort((a, b) => {\r\n      const aVal = a[sortField as string];\r\n      const bVal = b[sortField as string];\r\n      if (aVal < bVal) return sortDirection === \"asc\" ? -1 : 1;\r\n      if (aVal > bVal) return sortDirection === \"asc\" ? 1 : -1;\r\n      return 0;\r\n    });\r\n  }, [filteredRows, sortField, sortDirection]);\r\n\r\n  // Pagination state\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  // Handle page change\r\n  const handleChangePage = (event: any, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  // Handle rows per page change\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0); // Reset to first page when rows per page change\r\n  };\r\n\r\n  // Pagination logic\r\n  const paginatedRows = rows.slice(\r\n    currentPage * pageSize,\r\n    (currentPage + 1) * pageSize\r\n  );\r\n\r\n  const handleSort = (field: string) => {\r\n    if (sortField === field) {\r\n      setSortDirection((prev) => (prev === \"asc\" ? \"desc\" : \"asc\"));\r\n    } else {\r\n      setSortField(field);\r\n      setSortDirection(\"asc\");\r\n    }\r\n  };\r\n\r\n  // Handle page size change\r\n  const handlePageSizeChange = (e: any) => {\r\n    setPageSize(parseInt(e.target.value, 10));\r\n    setCurrentPage(0); // Reset to the first page\r\n  };\r\n\r\n  // Handle page change\r\n  const handlePageChange = (\r\n    event: React.ChangeEvent<unknown>,\r\n    value: number\r\n  ) => {\r\n    setCurrentPage(value - 1); // Pagination starts from 1, but we need to store 0-based index\r\n  };\r\n\r\n  const handleClickMenu = (\r\n    event: React.MouseEvent<HTMLElement>,\r\n    column: string\r\n  ) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setCurrentColumn(column);\r\n    const currentFilter = filters[column];\r\n    setFilterValue(currentFilter ? currentFilter.value : \"\");\r\n    setFilterType(currentFilter ? currentFilter.type : \"contains\");\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Box sx={{ position: \"relative\" }}>\r\n        {/* Blurred Edges */}\r\n        {/* <Box\r\n  sx={{\r\n    position: \"absolute\",\r\n    top: 0,\r\n    left: 0,\r\n    width: 30,\r\n    height: \"100%\",\r\n    zIndex: 2,\r\n    pointerEvents: \"none\",\r\n    background: \"linear-gradient(to right, #FFFFFFCC, #FFFFFF00)\"\r\n  }}\r\n/>\r\n<Box\r\n  sx={{\r\n    position: \"absolute\",\r\n    top: 0,\r\n    right: 0,\r\n    width: 30,\r\n    height: \"100%\",\r\n    zIndex: 2,\r\n    pointerEvents: \"none\",\r\n    background: \"linear-gradient(to left, #FFFFFFCC, #FFFFFF00)\"\r\n  }}\r\n/> */}\r\n\r\n        <TableContainer\r\n          component={Paper}\r\n          elevation={3}\r\n          sx={{\r\n            maxHeight: 500,\r\n            overflow: \"auto\",\r\n            borderRadius: 0,\r\n            border: \"1px solid black\",\r\n            position: \"relative\",\r\n            \"&::-webkit-scrollbar\": {\r\n              width: \"8px\",\r\n              height: \"8px\"\r\n            },\r\n            \"&::-webkit-scrollbar-thumb\": {\r\n              backgroundColor: \"#bbb\",\r\n              borderRadius: \"4px\"\r\n            }\r\n          }}\r\n        >\r\n          <Table stickyHeader sx={{ minWidth: 1000 }}>\r\n            <TableHead>\r\n              <TableRow\r\n                sx={{\r\n                  backgroundColor: \"#e0f2fe\",\r\n                  boxShadow: \"inset 0 -1px 0 rgba(0, 0, 0, 0.1)\"\r\n                }}\r\n              >\r\n                <TableCell sx={{ backgroundColor: \"#e0f2fe\" }} />\r\n                <TableCell\r\n                  padding=\"checkbox\"\r\n                  sx={{\r\n                    backgroundColor: \"#e0f2fe\",\r\n                    borderBottom: \"1px solid #bae6fd\"\r\n                  }}\r\n                >\r\n                  <Checkbox\r\n                    checked={selected.length === rows.length}\r\n                    indeterminate={\r\n                      selected.length > 0 && selected.length < rows.length\r\n                    }\r\n                    onChange={(e) =>\r\n                      setSelected(e.target.checked ? rows.map((r) => r.id) : [])\r\n                    }\r\n                    sx={{\r\n                      color: \"#0284c7\",\r\n                      \"&.Mui-checked\": {\r\n                        color: \"#0284c7\"\r\n                      },\r\n                      \"&.MuiCheckbox-indeterminate\": {\r\n                        color: \"#0284c7\"\r\n                      }\r\n                    }}\r\n                  />\r\n                </TableCell>\r\n\r\n                {columns.map((col) =>\r\n                  col.field === \"id\" ? null : (\r\n                    <TableCell\r\n                      key={col.field}\r\n                      sx={{\r\n                        fontWeight: 700,\r\n                        textTransform: \"capitalize\",\r\n                        backgroundColor: \"#e0f2fe\",\r\n                        color: \"#0f172a\",\r\n                        fontSize: \"0.9rem\",\r\n                        letterSpacing: \"0.02em\",\r\n                        borderBottom: \"1px solid #bae6fd\"\r\n                      }}\r\n                    >\r\n                      <Box\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"space-between\"\r\n                      >\r\n                        <TableSortLabel\r\n                          active={sortField === col.field}\r\n                          direction={\r\n                            sortField === col.field ? sortDirection : \"asc\"\r\n                          }\r\n                          onClick={() => handleSort(col.field)}\r\n                          sx={{\r\n                            \"& .MuiTableSortLabel-icon\": {\r\n                              color: \"#38bdf8\"\r\n                            },\r\n                            \"&.Mui-active .MuiTableSortLabel-icon\": {\r\n                              color: \"#0284c7\"\r\n                            }\r\n                          }}\r\n                        >\r\n                          {col.headerName}\r\n                        </TableSortLabel>\r\n\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={(e) => handleClickMenu(e, col.field)}\r\n                          sx={{\r\n                            ml: 1,\r\n                            color: \"#0284c7\",\r\n                            \"&:hover\": {\r\n                              color: \"#0369a1\"\r\n                            }\r\n                          }}\r\n                        >\r\n                          <MoreVertIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                      </Box>\r\n                    </TableCell>\r\n                  )\r\n                )}\r\n              </TableRow>\r\n            </TableHead>\r\n\r\n            <TableBody>\r\n              {paginatedRows.map((row, index) => (\r\n                <React.Fragment key={row.id}>\r\n                  <TableRow\r\n                    hover\r\n                    key={row.id}\r\n                    sx={{\r\n                      backgroundColor: index % 2 === 0 ? \"#ffffff\" : \"#f6f8fa\",\r\n                      transition: \"background-color 0.3s\"\r\n                    }}\r\n                  >\r\n                    <TableCell>\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() =>\r\n                          setExpandedRow(expandedRow === row.id ? null : row.id)\r\n                        }\r\n                      >\r\n                        {expandedRow === row.id ? <RemoveIcon /> : <AddIcon />}\r\n                      </IconButton>\r\n                    </TableCell>\r\n\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        checked={selected.includes(row.id)}\r\n                        onChange={() => handleSelect(row.id)}\r\n                      />\r\n                    </TableCell>\r\n\r\n                    {columns.map((col) =>\r\n                      col.field === \"status\" ? (\r\n                        <TableCell key={`${row.id}-status`}>\r\n                          <FormControl size=\"small\" fullWidth>\r\n                            <Select\r\n                              value={row.status ?? \"Inactive\"}\r\n                              onChange={(e) =>\r\n                                handleStatusChange(row.id, e.target.value)\r\n                              }\r\n                              sx={{\r\n                                fontSize: \"0.85rem\",\r\n                                fontWeight: 600,\r\n                                // border: \"1px solid #ccc\",\r\n                                borderRadius: \"0px\",\r\n                                color:\r\n                                  row.status === \"Active\"\r\n                                    ? \"#16a34a\"\r\n                                    : \"#dc2626\",\r\n                                backgroundColor:\r\n                                  row.status === \"Active\"\r\n                                    ? \"#dcfce7\"\r\n                                    : \"#fee2e2\",\r\n                                height: \"32px\"\r\n                              }}\r\n                            >\r\n                              <MenuItem value=\"Active\">Active</MenuItem>\r\n                              <MenuItem value=\"Inactive\">Inactive</MenuItem>\r\n                            </Select>\r\n                          </FormControl>\r\n                        </TableCell>\r\n                      ) : col.field === \"id\" ? null : (\r\n                        <TableCell key={`${row.id}-${col.field}`}>\r\n                          {row[col.field]}\r\n                        </TableCell>\r\n                      )\r\n                    )}\r\n                  </TableRow>\r\n\r\n                  {expandedRow === row.id && (\r\n                    <TableRow>\r\n                      <TableCell colSpan={columns.length + 2} sx={{ p: 0 }}>\r\n                        <Collapse in={true} timeout=\"auto\" unmountOnExit>\r\n                          <Box\r\n                            sx={{ p: 2, bgcolor: \"#f0f4f8\", borderRadius: 1 }}\r\n                          >\r\n                            <Typography variant=\"body2\">\r\n                              Nested details for{\" \"}\r\n                              <b>{row.name || `Row ${row.id}`}</b>\r\n                            </Typography>\r\n                          </Box>\r\n                        </Collapse>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </React.Fragment>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        <Paper\r\n          elevation={2}\r\n          sx={{\r\n            mt: 1,\r\n            px: 1,\r\n            py: 1,\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n            borderRadius: 0\r\n          }}\r\n        >\r\n          <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n            <Typography variant=\"body2\" sx={{ mr: 2 }}>\r\n              Rows per page:\r\n            </Typography>\r\n            <FormControl size=\"small\">\r\n              <Select\r\n                sx={{\r\n                  borderRadius: 0\r\n                }}\r\n                value={pageSize}\r\n                onChange={handlePageSizeChange}\r\n              >\r\n                {[10, 20, 50, 100].map((val) => (\r\n                  <MenuItem\r\n                    sx={{\r\n                      borderRadius: 0,\r\n                      \"&.MuiMenuItem-root\": {\r\n                        borderRadius: 0 // Additional safeguard for the inner MenuItem class\r\n                      }\r\n                    }}\r\n                    key={val}\r\n                    value={val}\r\n                  >\r\n                    {val}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n          <Pagination\r\n            count={Math.ceil(rows.length / pageSize)}\r\n            page={currentPage + 1}\r\n            onChange={(e, page) => setCurrentPage(page - 1)}\r\n            color=\"primary\"\r\n            shape=\"rounded\"\r\n            showFirstButton\r\n            showLastButton\r\n            siblingCount={0}\r\n            boundaryCount={1}\r\n            sx={{\r\n              \"& .MuiPaginationItem-root\": {\r\n                borderRadius: 0 // <--- 0 border radius for each item\r\n              }\r\n            }}\r\n          />\r\n        </Paper>\r\n      </Box>\r\n\r\n      {/* Filter Menu */}\r\n      <Menu\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={() => setAnchorEl(null)}\r\n        PaperProps={{\r\n          style: {\r\n            width: \"300px\",\r\n            padding: \"10px\"\r\n          }\r\n        }}\r\n      >\r\n        <MenuItem>\r\n          <FormControl fullWidth>\r\n            <InputLabel sx={{ fontWeight: 600 }}>Filter Type</InputLabel>\r\n            <Select\r\n              value={filterType}\r\n              onChange={handleFilterTypeChange}\r\n              label=\"Filter Type\"\r\n              sx={{\r\n                borderRadius: 0,\r\n                \"& .MuiOutlinedInput-notchedOutline\": {\r\n                  borderColor: \"black\"\r\n                },\r\n                \"&:hover .MuiOutlinedInput-notchedOutline\": {\r\n                  borderColor: \"#1773be\"\r\n                }\r\n              }}\r\n            >\r\n              <MenuItem value=\"contains\">Contains</MenuItem>\r\n              <MenuItem value=\"startsWith\">Starts With</MenuItem>\r\n              <MenuItem value=\"endsWith\">Ends With</MenuItem>\r\n              <MenuItem value=\"equals\">Equals</MenuItem>\r\n              <MenuItem value=\"greaterThan\">Greater Than</MenuItem>\r\n              <MenuItem value=\"lessThan\">Less Than</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </MenuItem>\r\n\r\n        <MenuItem>\r\n          <TextField\r\n            label=\"Filter Value\"\r\n            variant=\"outlined\"\r\n            value={filterValue}\r\n            onChange={() => {\r\n              handleFilterChange(filterType, filterValue);\r\n            }}\r\n            fullWidth\r\n            sx={{\r\n              mt: 1,\r\n              \"& .MuiInputLabel-root\": {\r\n                fontWeight: 600\r\n              },\r\n              \"& .MuiOutlinedInput-notchedOutline\": {\r\n                borderColor: \"#ccc\"\r\n              },\r\n              \"&:hover .MuiOutlinedInput-notchedOutline\": {\r\n                borderColor: \"#1773be\"\r\n              }\r\n            }}\r\n          />\r\n        </MenuItem>\r\n\r\n        <Box display=\"flex\" justifyContent=\"flex-end\" mt={2} mr={2}>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={applyFilter}\r\n            sx={{\r\n              padding: \"4px 16px\",\r\n              borderRadius: \"0px\",\r\n              backgroundColor: \"#1773ba\",\r\n              color: \"white\",\r\n              \"&:hover\": {\r\n                backgroundColor: \"#1773ba\"\r\n              }\r\n            }}\r\n          >\r\n            Apply\r\n          </Button>\r\n        </Box>\r\n      </Menu>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CustomTable;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Grid,\r\n  Typography,\r\n  Link,\r\n  useTheme\r\n} from \"@mui/material\";\r\nimport CancelIcon from \"@mui/icons-material/Cancel\";\r\nimport DownloadIcon from \"@mui/icons-material/Download\";\r\nimport { UploadFileOutlined } from \"@mui/icons-material\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { FileFormatIcon, NMSUploadIcon } from \"src/assets/svg/svg\";\r\nimport DescriptionIcon from \"@mui/icons-material/Description\"; // Generic file icon\r\nimport TableChartIcon from \"@mui/icons-material/TableChart\"; // XLSX table icon\r\n\r\nexport const FileUploadDialog = ({\r\n  title,\r\n  open,\r\n  onClose,\r\n  onBulkUpload\r\n}: any) => {\r\n  const theme = useTheme();\r\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\r\n  const [isDragOver, setIsDragOver] = useState(false);\r\n\r\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files?.[0]) {\r\n      setSelectedFile(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n    const file = e.dataTransfer.files[0];\r\n    if (file) {\r\n      setSelectedFile(file);\r\n    }\r\n  };\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    accept: {\r\n      \"application/vnd.ms-excel\": [\".xls\", \".xlsx\"],\r\n      \"text/csv\": [\".csv\"]\r\n    },\r\n    maxSize: 100 * 1024 * 1024,\r\n    onDrop: (acceptedFiles) => {\r\n      const file = acceptedFiles[0];\r\n      setSelectedFile(file);\r\n    }\r\n  });\r\n\r\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setIsDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = () => {\r\n    setIsDragOver(false);\r\n  };\r\n\r\n  const handleDownloadSampleCSV = () => {\r\n    const sampleData = `Name,Email,Phone\\nJohn Doe,john@example.com,1234567890\\nJane Smith,jane@example.com,9876543210`;\r\n    const blob = new Blob([sampleData], { type: \"text/csv\" });\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"sample.csv\";\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={() => {\r\n        setSelectedFile(null); // Reset selected file when closing the dialog\r\n        onClose();\r\n      }}\r\n      PaperProps={{\r\n        sx: {\r\n          borderRadius: \"16px\",\r\n          padding: 2,\r\n          backgroundColor: theme.palette.background.paper,\r\n          boxShadow: theme.shadows[5]\r\n        }\r\n      }}\r\n    >\r\n      `{\" \"}\r\n      <DialogTitle\r\n        sx={{\r\n          fontFamily: \"GT Walsheim Pro, sans-serif\",\r\n          fontWeight: 600,\r\n          fontSize: \"1.25rem\",\r\n          textAlign: \"center\",\r\n          pb: 1\r\n        }}\r\n      >\r\n        {title}\r\n      </DialogTitle>\r\n      `\r\n      <DialogContent\r\n        sx={{\r\n          pt: 0,\r\n          minWidth: { xs: 300, md: 500 } // <-- This will ensure stable sizing\r\n        }}\r\n      >\r\n        <Typography\r\n          sx={{ color: \"grey.700\" }}\r\n          variant=\"body2\"\r\n          textAlign=\"center\"\r\n        >\r\n          You can upload file via drag and drop or by clicking the upload\r\n          button.\r\n        </Typography>\r\n        <Grid item xs={12} md={6}>\r\n          <Card\r\n            variant=\"outlined\"\r\n            sx={{\r\n              p: 3,\r\n              mt: 2,\r\n              textAlign: \"center\",\r\n              borderStyle: \"dashed\",\r\n              borderColor: \"#1773BE\",\r\n              backgroundColor: \"#ECF4FA\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\"\r\n              // minHeight: 180, // Ensures size is stable\r\n            }}\r\n            {...getRootProps()}\r\n          >\r\n            <input {...getInputProps()} />\r\n\r\n            {/* If file is selected */}\r\n            {selectedFile ? (\r\n              <>\r\n                <Box\r\n                  sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\",\r\n                    mb: 2\r\n                  }}\r\n                >\r\n                  {selectedFile.name.endsWith(\".csv\") ? (\r\n                    <DescriptionIcon sx={{ fontSize: 40, color: \"#1773BE\" }} />\r\n                  ) : (\r\n                    <TableChartIcon sx={{ fontSize: 40, color: \"#1773BE\" }} />\r\n                  )}\r\n\r\n                  {/* File name */}\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    color=\"text.secondary\"\r\n                    sx={{ wordBreak: \"break-word\", mt: 1 }}\r\n                  >\r\n                    {selectedFile.name}\r\n                  </Typography>\r\n                </Box>\r\n\r\n                {/* Action buttons */}\r\n                <Box\r\n                  sx={{\r\n                    display: \"flex\",\r\n                    gap: 2\r\n                  }}\r\n                >\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    sx={{\r\n                      textTransform: \"none\",\r\n                      color: \"#1773BE\",\r\n                      borderColor: \"#1773BE\"\r\n                    }}\r\n                    onClick={(e) => {\r\n                      e.stopPropagation(); // Prevent opening file picker\r\n                      const url = URL.createObjectURL(selectedFile);\r\n                      window.open(url, \"_blank\");\r\n                    }}\r\n                  >\r\n                    View\r\n                  </Button>\r\n\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    sx={{ textTransform: \"none\", backgroundColor: \"#1773BE\" }}\r\n                    onClick={(e) => {\r\n                      // e.stopPropagation(); // prevent card click opening picker\r\n                      // document.querySelector('input[type=\"file\"]');\r\n                      getRootProps();\r\n                    }}\r\n                  >\r\n                    Replace\r\n                  </Button>\r\n                </Box>\r\n              </>\r\n            ) : (\r\n              // Before file is uploaded\r\n              <>\r\n                <Box\r\n                  sx={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    marginBottom: 1\r\n                  }}\r\n                >\r\n                  <NMSUploadIcon sx={{ paddingRight: \"8px\" }} />\r\n                  <Typography\r\n                    color=\"primary\"\r\n                    fontWeight=\"bold\"\r\n                    sx={{ color: \"#1773BE\", pl: 1 }}\r\n                  >\r\n                    Upload file\r\n                  </Typography>\r\n                </Box>\r\n\r\n                <Typography\r\n                  variant=\"body2\"\r\n                  color=\"text.secondary\"\r\n                  sx={{ marginBottom: 1 }}\r\n                >\r\n                  Max file size: 100MB\r\n                  <br />\r\n                  Supported formats: CSV, XLSX\r\n                </Typography>\r\n              </>\r\n            )}\r\n          </Card>\r\n\r\n          {/* Instruction & Download Sample - Show only when no file is selected */}\r\n          {!selectedFile && (\r\n            <Box\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              justifyContent=\"space-between\"\r\n              mt={2}\r\n            >\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                File should contain Meter ID, Meter Number and Command\r\n              </Typography>\r\n              <Button\r\n                variant=\"text\"\r\n                size=\"small\"\r\n                sx={{\r\n                  color: \"#1773BE\",\r\n                  textTransform: \"none\",\r\n                  \"&:hover\": { textDecoration: \"underline\" },\r\n                  pr: 2\r\n                }}\r\n                onClick={async () => {\r\n                  const fileUrl =\r\n                    \"https://present-blue-antlion.myfilebase.com/ipfs/QmSF1xjA2auTh1qPzST69J1QX1nF8Vbysa6UjVdx6TWw43\";\r\n                  const response = await fetch(fileUrl);\r\n\r\n                  if (response.ok) {\r\n                    const blob = await response.blob();\r\n                    const link = document.createElement(\"a\");\r\n                    link.href = URL.createObjectURL(blob);\r\n                    link.download = \"sample-file\";\r\n                    document.body.appendChild(link);\r\n                    link.click();\r\n                    document.body.removeChild(link);\r\n                  } else {\r\n                    console.error(\"Failed to fetch file\");\r\n                  }\r\n                }}\r\n              >\r\n                Download Sample\r\n              </Button>\r\n            </Box>\r\n          )}\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions\r\n        sx={{\r\n          justifyContent: \"space-between\",\r\n          px: 2.5,\r\n          pb: 2,\r\n          mt: 1,\r\n          // gap: 2,\r\n          alignItems: \"center\" // optional, aligns buttons vertically\r\n        }}\r\n      >\r\n        <Button\r\n          onClick={onClose}\r\n          variant=\"outlined\"\r\n          color=\"error\"\r\n          startIcon={<CancelIcon />}\r\n          sx={{\r\n            borderRadius: 1,\r\n            textTransform: \"none\",\r\n            px: 4\r\n          }}\r\n        >\r\n          Cancel\r\n        </Button>\r\n\r\n        <Button\r\n          onClick={onBulkUpload}\r\n          variant=\"outlined\"\r\n          startIcon={<UploadFileOutlined />}\r\n          sx={{\r\n            background: `linear-gradient(to right, ${theme.palette.primary.light}, ${theme.palette.primary.main}, ${theme.palette.primary.dark})`,\r\n            color: \"#fff\",\r\n            borderRadius: 1,\r\n            px: 4,\r\n            textTransform: \"none\",\r\n            // boxShadow: \"0px 4px 14px rgba(99, 102, 241, 0.3)\", // You can tweak this shadow if needed\r\n            \"&:hover\": {\r\n              background: `linear-gradient(to right, ${theme.palette.primary.dark}, ${theme.palette.primary.main})`\r\n            }\r\n          }}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Typography,\r\n  IconButton,\r\n  Collapse,\r\n  Paper\r\n} from \"@mui/material\";\r\nimport { DataGrid, GridToolbar, GridPaginationModel } from \"@mui/x-data-grid\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport ExpandLessIcon from \"@mui/icons-material/ExpandLess\";\r\nimport Table from \"src/components/Table/Table\";\r\nimport CustomTable from \"src/components/Table/Table\";\r\nimport FileDownloadIcon from \"@mui/icons-material/FileDownload\";\r\n// import { FileUploadDialog } from \"src/components/DialogBox/UploadDialog\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { FileUploadDialog } from \"src/components/DialogBox/UploadDialog\";\r\n\r\nconst columns = [\r\n  { field: \"meterNumber\", headerName: \"Meter Number\", width: 150 },\r\n  { field: \"commandType\", headerName: \"Command Type\", width: 180 },\r\n  { field: \"commandValue\", headerName: \"Command Value\", width: 140 },\r\n  { field: \"status\", headerName: \"Status\", width: 120 },\r\n  { field: \"syncStatus\", headerName: \"Sync Status\", width: 120 },\r\n  { field: \"createdOn\", headerName: \"Created On\", width: 180 },\r\n  { field: \"userGroup\", headerName: \"User Group\", width: 120 },\r\n  { field: \"groupCode\", headerName: \"Group Code\", width: 120 }\r\n];\r\n\r\nconst rows = Array.from({ length: 665 }).map((_, idx) => ({\r\n  id: idx + 1,\r\n  meterNumber: `AKL028625${idx % 10}`,\r\n  commandType: \"GetDailyLoadProfile\",\r\n  commandValue: \"2025-03-07\",\r\n  meterStatus: \"Expired\",\r\n  syncStatus: \"Cancelled\",\r\n  createdOn: \"28/03/2025 05:08 PM\",\r\n  userGroup: \"Group 1\",\r\n  groupCode: \"CR-68C50F\"\r\n}));\r\n\r\nexport default function Meters() {\r\n  const [expandedRow, setExpandedRow] = useState(null);\r\n  const [paginationModel, setPaginationModel] = useState<GridPaginationModel>({\r\n    page: 1,\r\n    pageSize: 10\r\n  });\r\n\r\n  // const { data, loading } = useDemoData({\r\n  //   dataSet: 'Commodity',\r\n  //   rowLength: 500,\r\n  //   maxColumns: 6,\r\n  // });\r\n\r\n  // const rows = [\r\n  //   { id: 1, name: \"Alice\", age: 25, city: \"New York\" },\r\n  //   { id: 2, name: \"Bob\", age: 30, city: \"Los Angeles\" },\r\n  //   { id: 3, name: \"Charlie\", age: 28, city: \"Chicago\" },\r\n  //   { id: 4, name: \"David\", age: 22, city: \"San Francisco\" },\r\n  //   { id: 5, name: \"Emma\", age: 29, city: \"Austin\" },\r\n  //   { id: 6, name: \"Frank\", age: 26, city: \"Denver\" },\r\n  // ];\r\n\r\n  const columns = [\r\n    { field: \"id\", headerName: \"ID\", minWidth: 70 },\r\n    { field: \"meterNumber\", headerName: \"Meter Number\", minWidth: 150 },\r\n    { field: \"commandType\", headerName: \"Command Type\", minWidth: 180 },\r\n    { field: \"commandValue\", headerName: \"Command Value\", minWidth: 150 },\r\n    { field: \"meterStatus\", headerName: \"Status\", minWidth: 100 },\r\n    { field: \"syncStatus\", headerName: \"Sync Status\", minWidth: 130 },\r\n    { field: \"createdOn\", headerName: \"Created On\", minWidth: 180 },\r\n    { field: \"userGroup\", headerName: \"User Group\", minWidth: 120 },\r\n    { field: \"groupCode\", headerName: \"Group Code\", minWidth: 150 }\r\n  ];\r\n\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [dialogTitle, setDialogTitle] = useState(\"\");\r\n\r\n  const handleBulkCancelCommands = () => {\r\n    setDialogTitle(\"Bulk Upload\");\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleBulkUploadCommands = () => {\r\n    setDialogTitle(\"Bulk Upload\");\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleBulkUpload = (file: File) => {\r\n    console.log(\"Bulk Upload File: \", file);\r\n    // Handle the bulk upload logic here\r\n  };\r\n  const exportCSV = () => {\r\n    const headers = columns.map((c) => c.headerName).join(\",\");\r\n    const data = rows\r\n      .map((row) => columns.map((col) => row[col.field]).join(\",\"))\r\n      .join(\"\\n\");\r\n    const blob = new Blob([`${headers}\\n${data}`], {\r\n      type: \"text/csv;charset=utf-8;\"\r\n    });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", url);\r\n    link.setAttribute(\"download\", \"table_data.csv\");\r\n    link.click();\r\n  };\r\n\r\n  const exportExcel = () => {\r\n    // Create headers\r\n    const headers = columns.map((c) => c.headerName);\r\n\r\n    // Create data rows\r\n    const data = rows.map((row) => columns.map((col) => row[col.field]));\r\n\r\n    // Combine headers and data\r\n    const worksheetData = [headers, ...data];\r\n\r\n    // Create worksheet and workbook\r\n    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n\r\n    // Export to file\r\n    XLSX.writeFile(workbook, \"table_data.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" mb={2} mt={6}>\r\n        <Typography variant=\"h6\"></Typography>\r\n        <Box>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"success\"\r\n            onClick={handleBulkUploadCommands}\r\n          >\r\n            Bulk Upload\r\n          </Button>\r\n        </Box>\r\n        {/* Dialog for file upload */}\r\n        <FileUploadDialog\r\n          title={dialogTitle}\r\n          open={openDialog}\r\n          onClose={handleCloseDialog}\r\n          onBulkUpload={handleBulkUpload}\r\n        />\r\n      </Box>\r\n\r\n      <CustomTable rows={rows} columns={columns} />\r\n    </Box>\r\n  );\r\n}\r\n"],"names":["_ref","rows","columns","handleStatusChange","id","value","page","setPage","useState","selected","setSelected","expandedRow","setExpandedRow","sortField","setSortField","sortDirection","setSortDirection","filters","setFilters","anchorEl","setAnchorEl","currentColumn","setCurrentColumn","filterValue","setFilterValue","filterType","setFilterType","currentPage","setCurrentPage","pageSize","setPageSize","filteredRows","useMemo","filtered","Object","entries","forEach","_ref2","field","filter","row","_row$field","toString","toLowerCase","includes","sort","a","b","aVal","bVal","rowsPerPage","setRowsPerPage","paginatedRows","slice","_jsxs","Box","children","sx","position","_jsx","TableContainer","component","Paper","elevation","maxHeight","overflow","borderRadius","border","width","height","backgroundColor","Table","stickyHeader","minWidth","TableHead","TableRow","boxShadow","TableCell","padding","borderBottom","Checkbox","checked","length","indeterminate","onChange","e","target","map","r","color","col","fontWeight","textTransform","fontSize","letterSpacing","display","alignItems","justifyContent","TableSortLabel","active","direction","onClick","handleSort","prev","headerName","IconButton","size","handleClickMenu","event","column","currentTarget","currentFilter","type","ml","MoreVertIcon","TableBody","index","React","hover","transition","RemoveIcon","AddIcon","handleSelect","item","_row$status","FormControl","fullWidth","Select","status","MenuItem","colSpan","p","Collapse","in","timeout","unmountOnExit","bgcolor","Typography","variant","name","mt","px","py","mr","parseInt","val","Pagination","count","Math","ceil","shape","showFirstButton","showLastButton","siblingCount","boundaryCount","Menu","open","Boolean","onClose","PaperProps","style","InputLabel","label","borderColor","TextField","handleFilterChange","_prev$field","Button","applyFilter","FileUploadDialog","title","onBulkUpload","theme","useTheme","selectedFile","setSelectedFile","isDragOver","setIsDragOver","getRootProps","getInputProps","useDropzone","accept","maxSize","onDrop","acceptedFiles","file","Dialog","palette","background","paper","shadows","DialogTitle","fontFamily","textAlign","pb","DialogContent","pt","xs","md","Grid","Card","borderStyle","flexDirection","_Fragment","mb","endsWith","DescriptionIcon","TableChartIcon","wordBreak","gap","stopPropagation","url","URL","createObjectURL","window","marginBottom","NMSUploadIcon","paddingRight","pl","textDecoration","pr","async","response","fetch","ok","blob","link","document","createElement","href","download","body","appendChild","click","removeChild","console","error","DialogActions","startIcon","CancelIcon","UploadFileOutlined","primary","light","main","dark","Array","from","_","idx","meterNumber","commandType","commandValue","meterStatus","syncStatus","createdOn","userGroup","groupCode","Meters","paginationModel","setPaginationModel","openDialog","setOpenDialog","dialogTitle","setDialogTitle","handleBulkUploadCommands","handleCloseDialog","log","CustomTable"],"sourceRoot":""}